//
// DefaultAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class DefaultAPI {
    /**

     - parameter user: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func caffCommentPost(user: CommentRequest? = nil, completion: @escaping ((_ data: CommentResponse?,_ error: Error?) -> Void)) {
        caffCommentPostWithRequestBuilder(user: user).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /caff/comment
     - Post a comment for a Caff file
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter user: (body)  (optional)

     - returns: RequestBuilder<CommentResponse> 
     */
    open class func caffCommentPostWithRequestBuilder(user: CommentRequest? = nil) -> RequestBuilder<CommentResponse> {
        let path = "/caff/comment"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: user)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CommentResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func caffDescriptorGet(completion: @escaping ((_ data: CaffWithoutCommentsWrapper?,_ error: Error?) -> Void)) {
        caffDescriptorGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /caff/descriptor
     - Get all CAFF descriptors (array containing element in called \"caffs\")
     - examples: [{contentType=application/json, example={"empty": false}}]

     - returns: RequestBuilder<CaffWithoutCommentsWrapper> 
     */
    open class func caffDescriptorGetWithRequestBuilder() -> RequestBuilder<CaffWithoutCommentsWrapper> {
        let path = "/caff/descriptor"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CaffWithoutCommentsWrapper>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func caffDescriptorIdGet(_id: Int, completion: @escaping ((_ data: CaffWithoutComments?,_ error: Error?) -> Void)) {
        caffDescriptorIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /caff/descriptor/{id}
     - Get the CAFF file and its data with the given parameter
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter _id: (path)  

     - returns: RequestBuilder<CaffWithoutComments> 
     */
    open class func caffDescriptorIdGetWithRequestBuilder(_id: Int) -> RequestBuilder<CaffWithoutComments> {
        var path = "/caff/descriptor/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<CaffWithoutComments>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter keyword: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func caffFindGet(keyword: String, completion: @escaping ((_ data: CaffWrapper?,_ error: Error?) -> Void)) {
        caffFindGetWithRequestBuilder(keyword: keyword).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /caff/find
     - Get Caff files by a keyword
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter keyword: (query)  

     - returns: RequestBuilder<CaffWrapper> 
     */
    open class func caffFindGetWithRequestBuilder(keyword: String) -> RequestBuilder<CaffWrapper> {
        let path = "/caff/find"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "keyword": keyword
        ])

        let requestBuilder: RequestBuilder<CaffWrapper>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func caffFullIdGet(_id: Int, completion: @escaping ((_ data: FullCaff?,_ error: Error?) -> Void)) {
        caffFullIdGetWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /caff/full/{id}
     - Get the Caff file in itself with the given parameter
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter _id: (path)  

     - returns: RequestBuilder<FullCaff> 
     */
    open class func caffFullIdGetWithRequestBuilder(_id: Int) -> RequestBuilder<FullCaff> {
        var path = "/caff/full/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<FullCaff>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func caffIdDelete(_id: Int, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        caffIdDeleteWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - DELETE /caff/{id}
     - Delete a Caff with its id
     - examples: [{contentType=application/json, example={
  "bytes": [],
  "empty": true
}}]
     
     - parameter _id: (path)  

     - returns: RequestBuilder<String> 
     */
    open class func caffIdDeleteWithRequestBuilder(_id: Int) -> RequestBuilder<String> {
        var path = "/caff/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter user: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func caffUploadPost(user: CaffBody? = nil, completion: @escaping ((_ data: Caff?,_ error: Error?) -> Void)) {
        caffUploadPostWithRequestBuilder(user: user).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /caff/upload
     - Upload a Caff file
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter user: (body)  (optional)

     - returns: RequestBuilder<Caff> 
     */
    open class func caffUploadPostWithRequestBuilder(user: CaffBody? = nil) -> RequestBuilder<Caff> {
        let path = "/caff/upload"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: user)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Caff>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter user: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func loginPost(user: LoginRegistrationBody? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        loginPostWithRequestBuilder(user: user).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /login
     - examples: [{contentType=application/json, example={
  "bytes": [],
  "empty": true
}}]
     
     - parameter user: (body)  (optional)

     - returns: RequestBuilder<String> 
     */
    open class func loginPostWithRequestBuilder(user: LoginRegistrationBody? = nil) -> RequestBuilder<String> {
        let path = "/login"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: user)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter _id: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userIdDelete(_id: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        userIdDeleteWithRequestBuilder(_id: _id).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /user/{id}
     - User can get deleted here
     
     - parameter _id: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func userIdDeleteWithRequestBuilder(_id: Int) -> RequestBuilder<Void> {
        var path = "/user/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter _id: (path)  
     - parameter user: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userIdPut(_id: Int, user: RegistrationModel? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        userIdPutWithRequestBuilder(_id: _id, user: user).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /user/{id}
     - A user can sign up here
     - examples: [{contentType=application/json, example={
  "bytes": [],
  "empty": true
}}]
     
     - parameter _id: (path)  
     - parameter user: (body)  (optional)

     - returns: RequestBuilder<String> 
     */
    open class func userIdPutWithRequestBuilder(_id: Int, user: RegistrationModel? = nil) -> RequestBuilder<String> {
        var path = "/user/{id}"
        let _idPreEscape = "\(_id)"
        let _idPostEscape = _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{id}", with: _idPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: user)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter user: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func userSignUpPost(user: LoginRegistrationBody? = nil, completion: @escaping ((_ data: Author?,_ error: Error?) -> Void)) {
        userSignUpPostWithRequestBuilder(user: user).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /user/sign-up
     - A user can sign up here
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter user: (body)  (optional)

     - returns: RequestBuilder<Author> 
     */
    open class func userSignUpPostWithRequestBuilder(user: LoginRegistrationBody? = nil) -> RequestBuilder<Author> {
        let path = "/user/sign-up"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: user)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Author>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
